;; This library only packages the upstream libre2 library. We put in a
;; separate library rather than putting in re2 directly to avoid
;; having to merge the .a and .so for libre2 and for the stubs of re2,
;; which is hard to do in a portable way

(library
 ((name        re2_c)
  (public_name re2.c)
  (preprocess no_preprocessing)
  (flags (:standard -safe-string))
  (c_library_flags (:standard -lstdc++ -lpthread))
  (self_build_stubs_archive (re2_c))))

;; We overapproximate the dependency of running make by depending on everything
;; in libre2 except for [obj] so we don't retrigger itself (obj contains build targets).
;; [obj] is excluded from dependencies by listing it in jbuild-ignore, sadly not the most
;; direct mechanism. The same mechanism also makes sure jenga doesn't delete the contents
;; of [obj] by stale artifacts removal.
;; 'make' doesn't rebuild in case of variable update (CXX, CXXFLAGS) so
;; we call 'make clean' first.
(rule
 ((targets (libre2_c_stubs.a dllre2_c_stubs.so))
  (deps ((files_recursively_in libre2)))
  (action (bash "
ARFLAGS=rsc
CXX=g++
CXXFLAGS=\"-Wall -O3 -g -pthread\"
if ! ${ARCH_SIXTYFOUR}; then
  CXX=\"$CXX -m32\"
fi
${MAKE} -s -C libre2 clean
${MAKE} -s -C libre2 \
  ARFLAGS=\"$ARFLAGS\" \
  CXX=\"$CXX\" \
  CXXFLAGS=\"$CXXFLAGS\" \
  obj/libre2.a obj/so/libre2.so
cp libre2/obj/libre2.a libre2_c_stubs.a
cp libre2/obj/so/libre2.so dllre2_c_stubs.so
${MAKE} -s -C libre2 clean
"))))


(jbuild_version 1)
